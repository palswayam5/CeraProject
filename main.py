# -*- coding: utf-8 -*-
"""CERAMD

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/sdrive/1TUQoDFrNihX_D3XQhzEhz64xU3Asz8g7

NECESSARY IMPORTS
"""

import google.generativeai as genai
import time
# import speech_recognition as sr  # For live audio input

import os
GOOGLE_API_KEY = os.environ.get("GOOGLE_API_KEY")

def ask_gemini(patient_history, model_name="gemini-1.5-flash", temperature=0.7):
    """
    Use Google's Gemini API to conduct a medical consultation.
    
    Parameters:
    - patient_history: The accumulated patient information so far
    - model_name: The Gemini model to use (default: gemini-1.5-flash)
    - temperature: Controls randomness (0.0 = deterministic, 1.0 = creative)
    
    Returns:
    - Gemini's response as text
    """
    # Create the model
    model = genai.GenerativeModel(
        model_name=model_name,
        generation_config={"temperature": temperature}
    )

    instructions = f"""[INST] You are a medical reasoning system conducting an interactive patient consultation.

PATIENT HISTORY:
{patient_history}

Based on the information gathered so far, what is ONE specific follow-up question you need to ask the patient next? or
If you have gathered sufficient information for a diagnosis, respond with "DIAGNOSIS_READY" instead of a question. [/INST]"""

    response = model.generate_content(instructions)
    return response.text

def generate_diagnosis(patient_history, model_name="gemini-1.5-flash", temperature=0.3):
    """
    Generate a diagnosis and prescription based on gathered patient information.
    
    Parameters:
    - patient_history: The complete patient information collected
    - model_name: The Gemini model to use
    - temperature: Lower temperature for more precise medical advice
    
    Returns:
    - Diagnosis and prescription as text
    """
    model = genai.GenerativeModel(
        model_name=model_name,
        generation_config={"temperature": temperature}
    )

    diagnosis_prompt = f"""[INST] You are an AI medical assistant.

Based on the following patient history, provide:
1. Possible diagnosis
2. General recommendations

Patient History:
{patient_history}

 [/INST]"""

    response = model.generate_content(diagnosis_prompt)
    return response.text

# def get_live_audio_input(prompt):
#     """
#     Prompts the user by printing the prompt, then listens for live speech input
#     using the microphone. Returns the recognized text.
#     """
#     print(prompt)
#     r = sr.Recognizer()
#     with sr.Microphone() as source:
#         print("Listening... Please speak now.")
#         audio = r.listen(source)
#     try:
#         text = r.recognize_google(audio)
#         print("You said:", text)
#         return text
#     except sr.UnknownValueError:
#         print("Sorry, I could not understand your speech. Please try again.")
#         return get_live_audio_input(prompt)
#     except sr.RequestError as e:
#         print("Could not request results; please check your network.", e)
#         # Fallback to keyboard input in case of error:
#         return input(prompt)

#def run_medical_consultation():
    """
    Run an interactive medical consultation that collects symptoms via live audio input
    until ready for diagnosis.
    """
    print("==== AI Medical Consultation System ====")
    print("DISCLAIMER: This system is for demonstration purposes only and does not provide")
    print("medical advice. Always consult a licensed healthcare professional for medical concerns.\n")

    # Get initial symptoms via live audio input
    initial_symptoms = get_live_audio_input("What symptoms are you experiencing?")
    patient_history = f"Initial symptoms: {initial_symptoms}"

    # Consultation loop
    consultation_active = True
    while consultation_active:
        response = ask_gemini(patient_history)

        # Check if AI signals readiness for diagnosis
        if "DIAGNOSIS_READY" in response:
            print("\nThank you for providing all the necessary information.")
            print("Generating assessment...\n")
            consultation_active = False
            continue

        print(f"\nAI: {response}")
        answer = get_live_audio_input("Your response:")

        # Append Q&A to patient history
        patient_history += f"\n\nQuestion: {response}\nAnswer: {answer}"

    # Generate and display diagnosis
    diagnosis = generate_diagnosis(patient_history)
    print("\n==== Assessment ====")
    print(diagnosis)

    # Save the consultation to a file
    timestamp = time.strftime("%Y%m%d-%H%M%S")
    filename = f"medical_consultation_{timestamp}.txt"
    with open(filename, "w") as f:
        f.write("==== Patient History ====\n\n")
        f.write(patient_history)
        f.write("\n\n==== Assessment ====\n\n")
        f.write(diagnosis)

    print(f"\nConsultation saved to {filename}")

# # Run the program
# if __name__ == "__main__":
#     run_medical_consultation()
